// import express from "express";
// import * as bodyParser from "body-parser";
// import {
//   compileRootHash,
//   compileHashAddresses,
//   generateMerkleProof,
//   makeMerkelRootFromProof,
// } from "../services";
// import { PrismaClient } from "@prisma/client";
// import crypto from "crypto";
// import { ethers } from "hardhat";
import axios from "axios";
// import data from '../data.json'
import * as fs from "fs";

// const prisma = new PrismaClient();

async function main() {
  // const concurrency = Number(process.argv.slice(2)[0]);
  // console.log("con", concurrency);
  // const a = new Array(concurrency).fill(null).map((_, i) => i + 1);
  let good = 0;
  let bad = 0;

  const startTime = new Date();
  try {
    const t = await axios.post(
      "http://localhost:3000/verify-trustanchor/0x4A679253410272dd5232B3Ff7cF5dbB88f295319"
    );

    const halfTime = new Date();
    const requestId = Number(t?.data?.requestId);
    const u = await axios.post(`http://localhost:3001/verify/${requestId}`, {
      holderWallet: "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
      issuerAddress: "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
      data: {
        type: "Buffer",
        data: [
          12, 137, 177, 3, 176, 211, 83, 10, 23, 48, 57, 54, 238, 254, 0, 187,
          7, 171, 199, 36, 113, 217, 186, 180, 24, 227, 165, 59, 61, 26, 220,
          69, 14, 232, 218, 30, 85, 185, 98, 224, 4, 73, 196, 139, 66, 99, 49,
          112, 254, 27, 22, 137, 12, 58, 250, 204, 235, 100, 83, 246, 251, 110,
          45, 60, 241, 255, 7, 16, 79, 133, 58, 121, 246, 223, 149, 76, 63, 179,
          75, 205, 56, 222, 207, 116, 0, 28, 32, 102, 217, 183, 28, 85, 221, 21,
          149, 15, 45, 227, 251, 199, 171, 59, 181, 74, 80, 113, 126, 30, 163,
          179, 234, 12, 98, 173, 119, 180, 94, 153, 49, 218, 105, 185, 132, 200,
          30, 76, 226, 236, 235, 112, 122, 124, 33, 86, 5, 64, 102, 13, 248, 34,
          164, 202, 135, 64, 133, 53, 13, 20, 26, 174, 70, 165, 62, 94, 100,
          230, 135, 64, 90, 217, 116, 26, 170, 236, 10, 31, 192, 204, 95, 130,
          224, 12, 149, 95, 181, 113, 179, 147, 16, 20, 197, 30, 36, 47, 13, 94,
          240, 252, 60, 226, 110, 138, 186, 245, 86, 107, 48, 93, 123, 177, 252,
          126, 213, 26, 86, 86, 157, 45, 85, 60, 190, 27, 45, 68, 219, 11, 139,
          248, 83, 109, 70, 195, 154, 229, 148, 160, 231, 43, 190, 24, 75, 231,
          251, 197, 107, 132, 146, 32, 254, 170, 15, 42, 110, 236, 47, 88, 17,
          115, 232, 36, 244, 191, 123, 181, 120, 251, 42, 148, 110, 122, 49, 53,
          6, 187, 171, 100, 113, 150, 132, 184, 57, 245, 126, 49, 238, 202, 105,
          222, 33, 83, 86, 209, 255, 206, 211, 224, 160, 44, 85, 255, 178, 10,
          31, 119, 17, 87, 101, 228, 205, 98, 114, 244, 11, 125, 133, 73, 135,
          238, 31, 83, 42, 82, 239, 101, 236, 245, 87, 65, 70, 40, 192, 210,
          195, 89, 111, 31, 166, 158, 142, 18, 235, 239, 197, 125, 90, 211, 166,
          131, 151, 239, 55, 39, 77, 125, 12, 165, 221, 225, 14, 158, 215, 40,
          33, 198, 247, 174, 126, 114, 98, 219, 214, 204, 152, 120, 46, 83, 163,
          128, 245, 137, 103, 160, 197, 254, 120, 86, 83, 105, 86, 202, 176,
          201, 78, 20, 192, 231, 0, 34, 205, 217, 158, 35, 35, 26, 204, 136,
          255, 232, 2, 224, 33, 34, 22, 254, 19, 167, 255, 11, 233, 5, 118, 237,
          192, 87, 7, 87, 125, 80, 243, 202, 142, 248, 141, 205, 40, 2, 57, 5,
          63, 225, 167, 141, 120, 253, 103, 127, 44, 185, 244, 114, 155, 0, 167,
          243, 123, 238, 58, 104, 146, 158, 198, 60, 250, 8, 142, 159, 212, 109,
          154, 64, 45, 129, 222, 76, 24, 171, 197, 117, 241, 103, 48, 249, 156,
          201, 147, 151, 145, 68, 98, 222, 143, 185, 149, 243, 61, 173, 56, 104,
          225, 173, 92, 38, 209, 211, 165, 141, 20, 190, 22, 26, 70, 104, 80,
          92, 134, 203, 10, 78, 197, 64, 10, 102,
        ],
      },
    });
    const endTime = new Date();
    const stop = new Date().getTime() - startTime.getTime();
    console.log("stop", stop);
    fs.appendFileSync(
      "./result.txt",
      `[${200}, ${halfTime.getTime() - startTime.getTime()}, ${
        endTime.getTime() - halfTime.getTime()
      }, ${stop}, 1]\n`
    );
  } catch (error) {
    console.log(error);
    fs.appendFileSync("./result.txt", `[${200}, ${0}, 0, 0, 0]\n`);
  }
}

main();
