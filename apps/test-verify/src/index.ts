// import express from "express";
// import * as bodyParser from "body-parser";
// import {
//   compileRootHash,
//   compileHashAddresses,
//   generateMerkleProof,
//   makeMerkelRootFromProof,
// } from "../services";
import { PrismaClient } from "@prisma/client";
// import crypto from "crypto";
// import { ethers } from "hardhat";
import axios from "axios";
// import data from '../data.json'
import * as fs from "fs";

const prisma = new PrismaClient();

async function main() {
  // const concurrency = Number(process.argv.slice(2)[0]);
  // console.log("con", concurrency);
  // const a = new Array(concurrency).fill(null).map((_, i) => i + 1);
  let good = 0;
  let bad = 0;

  const startTime = new Date();
  try {
    const t = await axios.post(
      "http://localhost:3000/verify-trustanchor/0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
    );

    const halfTime = new Date();
    const requestId = Number(t?.data?.requestid);
    const u = await axios.post(`http://localhost:3001/verify/${requestId}`, {
      holderWallet: "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
      issuerAddress: "0xC9a43158891282A2B1475592D5719c001986Aaec",
      data: {
        type: "Buffer",
        data: [
          209, 147, 174, 195, 209, 155, 78, 104, 228, 113, 239, 185, 88, 240,
          191, 17, 149, 179, 102, 150, 114, 131, 190, 176, 17, 119, 82, 233, 52,
          87, 186, 121, 31, 0, 42, 97, 200, 128, 168, 15, 192, 198, 61, 228,
          255, 176, 220, 13, 2, 242, 167, 75, 6, 202, 134, 253, 194, 184, 24,
          61, 52, 189, 117, 101, 220, 86, 233, 20, 64, 39, 67, 91, 66, 137, 227,
          239, 31, 24, 165, 167, 29, 131, 193, 121, 14, 45, 46, 141, 181, 114,
          162, 162, 247, 73, 134, 215, 231, 156, 162, 250, 227, 151, 231, 158,
          97, 52, 196, 227, 233, 6, 14, 130, 161, 157, 222, 47, 227, 94, 159,
          187, 192, 188, 215, 228, 137, 75, 95, 106, 132, 198, 53, 219, 92, 234,
          215, 5, 24, 34, 243, 122, 42, 57, 138, 198, 105, 209, 149, 211, 112,
          91, 236, 113, 152, 249, 139, 199, 28, 199, 177, 168, 222, 211, 52,
          228, 188, 161, 216, 124, 132, 39, 42, 245, 106, 172, 58, 105, 205,
          126, 76, 149, 154, 40, 162, 112, 148, 196, 69, 185, 150, 110, 108, 8,
          218, 137, 208, 103, 202, 148, 213, 73, 106, 152, 32, 196, 158, 13,
          117, 209, 62, 194, 39, 239, 225, 36, 99, 166, 167, 49, 162, 67, 138,
          180, 224, 107, 197, 207, 194, 225, 233, 86, 104, 146, 168, 96, 5, 83,
          142, 190, 196, 136, 81, 123, 206, 130, 158, 254, 126, 46, 133, 43,
          127, 102, 197, 144, 47, 161, 68, 205, 160, 187, 219, 105, 90, 115, 15,
          99, 82, 58, 5, 31, 207, 246, 37, 136, 204, 139, 155, 112, 130, 56,
          104, 168, 93, 211, 157, 62, 151, 30, 129, 105, 114, 180, 185, 104, 38,
          166, 227, 253, 7, 26, 211, 128, 10, 72, 45, 162, 1, 186, 250, 22, 69,
          223, 203, 125, 115, 237, 103, 59, 62, 92, 42, 246, 171, 201, 106, 116,
          114, 8, 242, 206, 166, 91, 0, 9, 237, 224, 79, 215, 78, 86, 97, 53,
          29, 72, 190, 215, 206, 214, 107, 173, 18, 125, 180, 199, 142, 109,
          150, 63, 251, 129, 219, 42, 19, 174, 127, 42, 6, 91, 119, 13, 124, 69,
          216, 190, 245, 152, 188, 39, 20, 236, 229, 126, 207, 34, 167, 45, 186,
          5, 123, 225, 236, 223, 103, 244, 199, 98, 210, 241, 131, 170, 132,
          224, 239, 112, 90, 94, 136, 99, 255, 128, 198, 51, 97, 158, 136, 84,
          24, 135, 28, 201, 250, 23, 100, 228, 227, 86, 122, 100, 70, 117, 178,
          75, 190, 233, 92, 175, 218, 18, 59, 212, 26, 11, 172, 215, 101, 50,
          184, 21, 231, 217, 228, 38, 15, 127, 29, 179, 71, 61, 210, 79, 220,
          66, 105, 243, 78, 104, 131, 146, 188, 98, 69, 99, 232, 216, 0, 232,
          244, 40, 116, 224, 239, 193, 212, 17, 190, 234, 198, 87, 187, 193, 15,
          166, 0, 6, 45, 151, 209, 145, 22, 124, 141, 29, 225, 67, 109, 135, 26,
          50, 71, 198, 22, 50,
        ],
      },
    });
    const endTime = new Date();
    const stop = new Date().getTime() - startTime.getTime();
    console.log("stop", stop);
    fs.appendFileSync(
      "./result.txt",
      `[${200}, ${halfTime.getTime() - startTime.getTime()}, ${
        endTime.getTime() - halfTime.getTime()
      }, ${stop}, 1]\n`
    );
  } catch (error) {
    console.log(error)
    fs.appendFileSync("./result.txt", `[${200}, ${0}, 0, 0, 0]\n`);
  }
}

main();
