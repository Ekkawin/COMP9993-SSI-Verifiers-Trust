// import express from "express";
// import * as bodyParser from "body-parser";
// import {
//   compileRootHash,
//   compileHashAddresses,
//   generateMerkleProof,
//   makeMerkelRootFromProof,
// } from "../services";
// import { PrismaClient } from "@prisma/client";
// import crypto from "crypto";
// import { ethers } from "hardhat";
import axios from "axios";
// import data from '../data.json'
import * as fs from "fs";

// const prisma = new PrismaClient();

async function main() {
  // const concurrency = Number(process.argv.slice(2)[0]);
  // console.log("con", concurrency);
  // const a = new Array(concurrency).fill(null).map((_, i) => i + 1);
  let good = 0;
  let bad = 0;

  const startTime = new Date();
  try {
    const t = await axios.post(
      "http://localhost:3000/verify-trustanchor/0x82Ab68099eed0b1276bcacdBbf31B3Cc7563960A"
    );

    const halfTime = new Date();
    const requestId = Number(t?.data?.requestid);
    const u = await axios.post(`http://45.76.124.221/verify/${requestId}`, {
      holderWallet: "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
      issuerAddress: "0x9A676e781A523b5d0C0e43731313A708CB607508",
      data: {
        type: "Buffer",
        data: [
          96, 207, 56, 207, 127, 195, 101, 16, 132, 47, 147, 225, 115, 169, 77,
          82, 70, 69, 114, 189, 0, 66, 6, 249, 136, 253, 23, 115, 88, 156, 194,
          139, 97, 175, 170, 32, 173, 60, 108, 200, 8, 45, 249, 227, 70, 15,
          231, 247, 218, 129, 117, 171, 238, 161, 153, 74, 211, 6, 254, 149, 85,
          211, 3, 255, 73, 219, 150, 155, 137, 162, 191, 220, 138, 43, 175, 217,
          148, 184, 185, 19, 216, 17, 102, 28, 187, 136, 35, 170, 40, 62, 239,
          151, 234, 100, 12, 45, 226, 55, 200, 76, 73, 26, 250, 57, 243, 21,
          169, 140, 78, 49, 224, 160, 246, 72, 228, 123, 119, 188, 245, 49, 131,
          111, 194, 223, 78, 65, 244, 199, 14, 5, 236, 217, 207, 82, 205, 132,
          172, 107, 1, 186, 3, 180, 218, 238, 1, 82, 172, 237, 84, 76, 18, 13,
          16, 189, 176, 78, 196, 75, 247, 110, 73, 146, 120, 156, 215, 35, 55,
          227, 51, 73, 55, 236, 228, 129, 102, 85, 79, 5, 171, 46, 12, 109, 148,
          124, 218, 69, 173, 65, 0, 216, 3, 251, 209, 239, 101, 180, 38, 139,
          225, 182, 175, 72, 40, 29, 89, 50, 219, 78, 129, 95, 20, 69, 241, 235,
          110, 91, 163, 45, 174, 71, 224, 190, 207, 142, 19, 246, 21, 167, 167,
          137, 32, 5, 187, 222, 22, 195, 97, 25, 113, 49, 116, 86, 62, 243, 198,
          81, 101, 217, 195, 230, 174, 63, 154, 227, 15, 77, 31, 63, 43, 232,
          56, 140, 242, 65, 72, 254, 230, 150, 19, 60, 58, 219, 150, 16, 166,
          69, 189, 10, 219, 14, 135, 109, 135, 166, 210, 128, 13, 242, 131, 108,
          133, 170, 17, 34, 21, 124, 142, 206, 119, 194, 14, 97, 211, 115, 35,
          55, 160, 48, 10, 4, 234, 168, 180, 247, 56, 178, 122, 101, 244, 243,
          73, 5, 176, 80, 226, 222, 194, 105, 123, 173, 87, 30, 204, 68, 75, 47,
          253, 191, 245, 145, 64, 72, 105, 40, 175, 202, 172, 78, 117, 121, 140,
          85, 95, 122, 214, 111, 47, 19, 161, 203, 8, 198, 44, 30, 0, 5, 176,
          32, 13, 244, 116, 132, 163, 163, 182, 195, 57, 32, 125, 40, 197, 229,
          238, 175, 243, 24, 228, 252, 84, 122, 58, 252, 25, 113, 98, 162, 82,
          49, 244, 177, 24, 81, 223, 49, 17, 236, 246, 108, 127, 248, 34, 227,
          92, 195, 145, 220, 89, 166, 247, 55, 74, 174, 15, 6, 47, 224, 101,
          193, 96, 191, 57, 160, 121, 169, 199, 83, 166, 242, 129, 185, 100, 23,
          26, 126, 53, 118, 99, 152, 122, 242, 135, 7, 30, 51, 55, 248, 174, 22,
          31, 239, 211, 168, 44, 77, 151, 67, 26, 137, 191, 220, 188, 238, 118,
          245, 141, 84, 160, 179, 67, 250, 133, 176, 161, 75, 154, 225, 62, 8,
          220, 124, 151, 216, 88, 116, 238, 49, 134, 194, 240, 185, 192, 85,
          108, 213, 128, 184, 191, 254, 183, 8, 166, 92,
        ],
      },
    });
    const endTime = new Date();
    const stop = new Date().getTime() - startTime.getTime();
    console.log("stop", stop);
    fs.appendFileSync(
      "./result.txt",
      `[${200}, ${halfTime.getTime() - startTime.getTime()}, ${
        endTime.getTime() - halfTime.getTime()
      }, ${stop}, 1]\n`
    );
  } catch (error) {
    console.log(error);
    fs.appendFileSync("./result.txt", `[${200}, ${0}, 0, 0, 0]\n`);
  }
}

main();
